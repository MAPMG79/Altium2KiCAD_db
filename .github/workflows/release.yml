name: Release

on:
  release:
    types: [published]

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Extract version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Update version in files
      run: |
        # Update version in pyproject.toml if it exists
        if [ -f "pyproject.toml" ]; then
          sed -i "s/version = \".*\"/version = \"${{ steps.get_version.outputs.VERSION }}\"/" pyproject.toml
        fi
        
        # Update version in setup.py
        sed -i "s/version=\".*\"/version=\"${{ steps.get_version.outputs.VERSION }}\"/" setup.py
        
        # Update version in __init__.py
        sed -i "s/__version__ = \".*\"/__version__ = \"${{ steps.get_version.outputs.VERSION }}\"/" migration_tool/__init__.py
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check distribution
      run: |
        twine check dist/*
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        skip_existing: true

  build-docker:
    runs-on: ubuntu-latest
    needs: build-and-publish
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Extract version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          yourusername/altium2kicad:latest
          yourusername/altium2kicad:${{ steps.get_version.outputs.VERSION }}
        cache-from: type=registry,ref=yourusername/altium2kicad:buildcache
        cache-to: type=registry,ref=yourusername/altium2kicad:buildcache,mode=max